{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { SIGNUP_SUCCESS, SIGNUP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/api/token/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(setAlert('Authenticated successfully', 'success'));\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(setAlert('Error Authenticating', 'error'));\n  }\n};\nexport const signup = _ref => {\n  let {\n    name,\n    email,\n    password,\n    password2\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password,\n      password2\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/api/accounts/signup`, body, config);\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: res.data\n      });\n      dispatch(login(email, password));\n    } catch (err) {\n      dispatch({\n        type: SIGNUP_FAIL\n      });\n      dispatch(setAlert('Error Authenticating', 'error'));\n    }\n  };\n};\nexport const logout = () => dispatch => {\n  dispatch(setAlert('logout successful.', 'success'));\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/nazarkashif/CollegeCourses/Sem-8/SPE/ReadFeedCatalogue/frontend/src/actions/auth.js"],"names":["axios","setAlert","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","login","email","password","dispatch","config","headers","body","JSON","stringify","res","post","process","env","REACT_APP_API_URL","type","payload","data","err","signup","name","password2","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACIC,cADJ,EAEIC,WAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,QAMO,SANP;AAQA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMC,QAAN,IAAkB;AACxD,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AAEA,MAAI;AACA,UAAMO,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,aAA5C,EAA0DP,IAA1D,EAAgEF,MAAhE,CAAlB;AAEAD,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEjB,aADD;AAELkB,MAAAA,OAAO,EAAEN,GAAG,CAACO;AAFR,KAAD,CAAR;AAKAb,IAAAA,QAAQ,CAACT,QAAQ,CAAC,4BAAD,EAA+B,SAA/B,CAAT,CAAR;AACH,GATD,CASE,OAAOuB,GAAP,EAAY;AACVd,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAEhB;AADD,KAAD,CAAR;AAIAK,IAAAA,QAAQ,CAACT,QAAQ,CAAC,sBAAD,EAAyB,OAAzB,CAAT,CAAR;AACH;AACJ,CAzBM;AA2BP,OAAO,MAAMwB,MAAM,GAAG;AAAA,MAAC;AAAEC,IAAAA,IAAF;AAAQlB,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBkB,IAAAA;AAAzB,GAAD;AAAA,SAA0C,MAAMjB,QAAN,IAAkB;AAC9E,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEW,MAAAA,IAAF;AAAQlB,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBkB,MAAAA;AAAzB,KAAf,CAAb;;AAEA,QAAI;AACA,YAAMX,GAAG,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,sBAA5C,EAAmEP,IAAnE,EAAyEF,MAAzE,CAAlB;AAEAD,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAEnB,cADD;AAELoB,QAAAA,OAAO,EAAEN,GAAG,CAACO;AAFR,OAAD,CAAR;AAKAb,MAAAA,QAAQ,CAACH,KAAK,CAACC,KAAD,EAAQC,QAAR,CAAN,CAAR;AACH,KATD,CASE,OAAOe,GAAP,EAAY;AACVd,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAElB;AADD,OAAD,CAAR;AAIAO,MAAAA,QAAQ,CAACT,QAAQ,CAAC,sBAAD,EAAyB,OAAzB,CAAT,CAAR;AACH;AACJ,GAzBqB;AAAA,CAAf;AA2BP,OAAO,MAAM2B,MAAM,GAAG,MAAMlB,QAAQ,IAAI;AACpCA,EAAAA,QAAQ,CAACT,QAAQ,CAAC,oBAAD,EAAuB,SAAvB,CAAT,CAAR;AACAS,EAAAA,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAEf;AAAR,GAAD,CAAR;AACH,CAHM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT\n} from './types';\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/api/token/`, body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Authenticated successfully', 'success'));\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        });\n\n        dispatch(setAlert('Error Authenticating', 'error'));\n    }\n};\n\nexport const signup = ({ name, email, password, password2 }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, email, password, password2 }); \n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/api/accounts/signup`, body, config);\n\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(login(email, password));\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        });\n\n        dispatch(setAlert('Error Authenticating', 'error'));\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch(setAlert('logout successful.', 'success'));\n    dispatch({ type: LOGOUT });\n}"]},"metadata":{},"sourceType":"module"}